#
# EFS CSI dynamic provisioning
# Dynamic provisioning is not yet supported for Fargate pods. 
#
resource "aws_security_group" "efs_sg" {
  count = var.eks_nodes.fargate == null ? 1 : 0
  name        = "${var.eks_name}-efs-sg"
  description = "Allow Inbound NFS Traffic from EKS VPC CIDR"
  vpc_id      = aws_vpc.eks_vpc.id # To further restrict access to your file system, you can use the CIDR for your subnet instead of the VPC.

  ingress {
    description      = "Allow Inbound NFS Traffic from EKS VPC CIDR to EFS File System"
    from_port        = 2049
    to_port          = 2049
    protocol         = "tcp"
    cidr_blocks      = [aws_vpc.eks_vpc.cidr_block]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = merge(
    {
      Name = "${var.eks_name}-efs-sg"
    },
    var.common_tags
  )
}

resource "aws_efs_file_system" "efs_file_system" {
  count = var.eks_nodes.fargate == null ? 1 : 0
  creation_token = "${var.eks_name}-efs-demo"
  tags = merge(
    {
      Name = "${var.eks_name}-efs-demo"
    },
    var.common_tags
  )
}

resource "aws_efs_mount_target" "efs_mount_target_private_subnet" {
  count = var.eks_nodes.fargate == null && var.eks_nodes.private_ec2 != null ? length(aws_subnet.eks_private_subnet) : 0
  file_system_id  = aws_efs_file_system.efs_file_system[0].id
  subnet_id       = aws_subnet.eks_private_subnet[count.index].id
  security_groups = [ aws_security_group.efs_sg[0].id ]
}

resource "aws_efs_mount_target" "efs_mount_target_public_subnet" {
  count = var.eks_nodes.fargate == null && var.eks_nodes.public_ec2 != null ? length(aws_subnet.eks_public_subnet) : 0
  file_system_id  = aws_efs_file_system.efs_file_system[0].id
  subnet_id       = aws_subnet.eks_public_subnet[count.index].id
  security_groups = [ aws_security_group.efs_sg[0].id ]
}

resource "kubernetes_storage_class_v1" "efs_sc" {  
  count = var.eks_nodes.fargate == null ? 1 : 0
  metadata {
    name = "${var.eks_name}-efs-sc"
  }
  storage_provisioner = "efs.csi.aws.com" 
  reclaim_policy      = "Delete"  # or Retain 
  parameters = {
    provisioningMode = "efs-ap" # required
    fileSystemId =  aws_efs_file_system.efs_file_system[0].id
    directoryPerms: "777" # required
  }
}

resource "kubernetes_persistent_volume_claim_v1" "efs_pvc" {
  count = var.eks_nodes.fargate == null ? 1 : 0
  metadata {
    name = "${var.eks_name}-efs-pvc"
  }
  spec {
    access_modes = ["ReadWriteMany"]
    storage_class_name = kubernetes_storage_class_v1.efs_sc[0].metadata[0].name 
    resources {
      requests = {
        storage = "2Gi"
      }
    }
  }

  depends_on = [ 
    aws_eks_addon.efs_csi_driver,
    aws_efs_file_system.efs_file_system,
    aws_efs_mount_target.efs_mount_target_private_subnet,
    aws_efs_mount_target.efs_mount_target_public_subnet
  ]
}

resource "kubernetes_pod_v1" "efs_app" {
  count = var.eks_nodes.fargate == null ? 1 : 0
  metadata {
    name = "${var.eks_name}-efs-app"
  }

  spec {
    container {
      image = "centos"
      name  = "app"
      command = ["/bin/sh"]
      args = ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
      volume_mount {
        name = "persistent-storage"
        mount_path = "/data"
      }
    }
    volume {
      name = "persistent-storage"    
      persistent_volume_claim {
        claim_name = kubernetes_persistent_volume_claim_v1.efs_pvc[0].metadata[0].name 
      } 
    }
  }
}
